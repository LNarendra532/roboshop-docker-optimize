FROM node:20-alpine3.21 AS builder
WORKDIR /opt/server
COPY package.json .
COPY *.js .
RUN npm install

#Starts a new clean Node.js Alpine image (this will be your final running image).
#Creates a new user roboshop and group roboshop (for security; avoids running as root).
# Sets environment variables
#MONGO="true" → indicates MongoDB is used.
#MONGO_URL=... → connection string to MongoDB database for catalogue service.
#WORKDIR /opt/server
#USER roboshop #Tells Docker to run the app as the roboshop user (for better security).
#COPY --from=builder /opt/server /opt/server/ #Copies the built app from the builder stage into this final image.
#CMD ["node", "server.js"] #This tells Docker to run node server.js when the container starts.

FROM node:20-alpine3.21 
RUN addgroup -S roboshop && adduser -S roboshop -G roboshop
ENV MONGO="true" \
    MONGO_URL="mongodb://mongodb:27017/catalogue" 
WORKDIR /opt/server
USER roboshop
COPY --from=builder /opt/server /opt/server/
CMD ["node" , "server.js"]


# multi stage builsds
# we can use msb builds , multiple dockerfiles inside single docker files
# we can use one doker file as builder another one final image.
#we can copy files in builder image  paste it to the final image    
# we can save some space 




# FROM node:20-alpine3.21
# RUN addgroup -S roboshop && adduser -S roboshop -G roboshop
# WORKDIR /opt/server
# #roboshop user has permisions from here now
# COPY package.json .
# COPY *.js .
# RUN npm install
# RUN chown -R roboshop:roboshop /opt/server 
# ENV MONGO="true" \
#     MONGO_URL="mongodb://mongodb:27017/catalogue" 
# USER roboshop
# CMD ["node" "server.js"]
